



AWS Crypto Tools                                            . Amazon AWS
                                                              Amazon AWS
                                                       21 September 2021


                                 client
                                 client

Abstract

   The client specification for the AWS Encryption SDK.

Table of Contents

   1.  Conventions and Definitions
   2.  Client
     2.1.  Version
     2.2.  Implementations
     2.3.  Overview
     2.4.  Initialization
       2.4.1.  Commitment Policy
       2.4.2.  Maximum Number Of Encrypted Data Keys
     2.5.  Operation
       2.5.1.  Encrypt
       2.5.2.  Decrypt
   3.  Normative References
   Acknowledgments
   Author's Address

1.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here

2.  Client

2.1.  Version

   0.1.0

2.2.  Implementations

   +========+==========+=========+===========================================================+
   |Language|Confirmed |Minimum  |Implementation                                             |
   |        |Compatible|Version  |                                                           |
   |        |with Spec |Confirmed|                                                           |
   |        |Version   |         |                                                           |
   +========+==========+=========+===========================================================+
   |C       |0.1.0     |0.1.0    |session.c (https://github.com/aws/aws-encryption-sdk-      |
   |        |          |         |c/blob/master/source/session.c)                            |
   +--------+----------+---------+-----------------------------------------------------------+
   |NodeJS  |0.1.0     |0.1.0    |index.ts (https://github.com/aws/aws-encryption-sdk-       |
   |        |          |         |javascript/blob/master/modules/client-node/src/index.ts)   |
   +--------+----------+---------+-----------------------------------------------------------+
   |Browser |0.1.0     |0.1.0    |index.ts (https://github.com/aws/aws-encryption-sdk-       |
   |JS      |          |         |javascript/blob/master/modules/client-browser/src/index.ts)|
   +--------+----------+---------+-----------------------------------------------------------+
   |Python  |0.1.0     |0.1.0    |__init__.py (https://github.com/aws/aws-encryption-sdk-    |
   |        |          |         |python/blob/master/src/aws_encryption_sdk/__init__.py)     |
   +--------+----------+---------+-----------------------------------------------------------+
   |Java    |0.1.0     |0.1.0    |AwsCrypto.java (https://github.com/aws/aws-encryption-sdk- |
   |        |          |         |java/blob/master/src/main/java/com/amazonaws/encryptionsdk/|
   |        |          |         |AwsCrypto.java)                                            |
   +--------+----------+---------+-----------------------------------------------------------+

                                  Table 1

2.3.  Overview

   This document describes the client experience for the AWS Encryption
   SDK.

   The top level client supports configuration settings that need to be
   coordinated between encrypt and decrypt.  Coordinating static
   settings between encrypt and decrypt across hosts is complicated.  It
   is important that all messages that could be sent to a host can be
   decrypted by that host.  A top level client makes such settings hard
   to misuse (https://github.com/awslabs/aws-encryption-sdk-
   specification/blob/master/tenets.md#hard-to-misuse) because anything
   a client encrypts can be decrypted by the same client.

2.4.  Initialization

   On client initialization, the caller MUST have the option to provide
   a:

   *  commitment policy (Section 2.4.1)

   *  maximum number of encrypted data keys (Section 2.4.2)

   If no commitment policy (Section 2.4.1) is provided the default MUST
   be REQUIRE_ENCRYPT_REQUIRE_DECRYPT (../framework/algorithm-
   suites.md#require_encrypt_require_decrypt).  If no maximum number of
   encrypted data keys (Section 2.4.2) is provided the default MUST
   result in no limit on the number of encrypted data keys (aside from
   the limit imposed by the message format (../format/message-
   header.md)).

   Once a commitment policy (Section 2.4.1) has been set it SHOULD be
   immutable.

2.4.1.  Commitment Policy

   Some algorithm suites provide a commitment that one and only one data
   key can be used to decrypt the plaintext.  Commitment policies
   control which algorithm suites are enabled for encrypt (encrypt.md)
   and decrypt (decrypt.md).  As well as which algorithm suite is the
   default.

   The AWS Encryption SDK MUST provide the following commitment
   policies:

   *  FORBID_ENCRYPT_ALLOW_DECRYPT

   *  REQUIRE_ENCRYPT_ALLOW_DECRYPT

   *  REQUIRE_ENCRYPT_REQUIRE_DECRYPT

2.4.2.  Maximum Number Of Encrypted Data Keys

   A AWS Encryption SDK message can contain multiple encrypted data
   keys.  This is the maximum number of encrypted data keys that the
   client will attempt to unwrap.  Callers MUST have a way to disable
   this limit.

2.4.2.1.  FORBID_ENCRYPT_ALLOW_DECRYPT

   When the commitment policy "FORBID_ENCRYPT_ALLOW_DECRYPT" is
   configured:

   *  "03 78" MUST be the default algorithm suite

   *  encrypt (encrypt.md) MUST only support algorithm suites that have
      a Key Commitment (../framework/algorithm-suites.md#algorithm-
      suites-encryption-key-derivation-settings) value of False

   *  decrypt (decrypt.md) MUST support all algorithm suites

2.4.2.2.  REQUIRE_ENCRYPT_ALLOW_DECRYPT

   When the commitment policy "REQUIRE_ENCRYPT_ALLOW_DECRYPT" is
   configured:

   *  "05 78" MUST be the default algorithm suite

   *  encrypt (encrypt.md) MUST only support algorithm suites that have
      a Key Commitment (../framework/algorithm-suites.md#algorithm-
      suites-encryption-key-derivation-settings) value of True

   *  decrypt (decrypt.md) MUST support all algorithm suites

2.4.2.3.  REQUIRE_ENCRYPT_REQUIRE_DECRYPT

   When the commitment policy "REQUIRE_ENCRYPT_REQUIRE_DECRYPT" is
   configured:

   *  "05 78" MUST be the default algorithm suite

   *  encrypt (encrypt.md) MUST only support algorithm suites that have
      a Key Commitment (../framework/algorithm-suites.md#algorithm-
      suites-encryption-key-derivation-settings) value of True

   *  decrypt (decrypt.md) MUST only support algorithm suites that have
      a Key Commitment (../framework/algorithm-suites.md#algorithm-
      suites-encryption-key-derivation-settings) value of True

2.5.  Operation

2.5.1.  Encrypt

   The AWS Encryption SDK Client MUST provide an encrypt
   (./encrypt.md#input) function that will honor the client's configured
   commitment policy (Section 2.4.1).

2.5.2.  Decrypt

   The AWS Encryption SDK Client MUST provide an decrypt
   (./decrypt.md#input) function that will honor the client's configured
   commitment policy (Section 2.4.1).

3.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

Acknowledgments

Author's Address

   Amazon AWS
   Amazon AWS

   Email: cryptools+rfc@amazon.com
