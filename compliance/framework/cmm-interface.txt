



AWS Crypto Tools                                            . Amazon AWS
                                                              Amazon AWS
                                                         25 October 2021


                             cmm-interface
                             cmm-interface

Abstract

   The cmm-interface specification for the AWS Encryption SDK.

Table of Contents

   1.  Conventions and Definitions
   2.  Cryptographic Materials Manager Interface
     2.1.  Version
       2.1.1.  Changelog
     2.2.  Implementations
     2.3.  Overview
     2.4.  Definitions
       2.4.1.  Conventions used in this document
     2.5.  Supported CMMs
     2.6.  Interface
       2.6.1.  Inputs
       2.6.2.  Behaviors
     2.7.  Customization
   3.  Normative References
   Acknowledgments
   Author's Address

1.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here

2.  Cryptographic Materials Manager Interface

2.1.  Version

   0.3.0

2.1.1.  Changelog

   *  0.3.0

      -  Clarify handling of the "aws-crypto-public-key" encryption
         context key.

   *  0.2.0

      -  Remove Keyring Trace (../changes/2020-05-13_remove-keyring-
         trace/change.md)

   *  0.1.0-preview

      -  Initial record

2.2.  Implementations

   +==========+=============+=========+===========================================================+
   |Language  |Confirmed    |Minimum  |Implementation                                             |
   |          |Compatible   |Version  |                                                           |
   |          |with Spec    |Confirmed|                                                           |
   |          |Version      |         |                                                           |
   +==========+=============+=========+===========================================================+
   |C         |0.1.0-preview|0.1.0    |materials.h (https://github.com/aws/aws-encryption-sdk-    |
   |          |             |         |c/blob/master/include/aws/cryptosdk/materials.h)           |
   +----------+-------------+---------+-----------------------------------------------------------+
   |Javascript|0.1.0-preview|0.1.0    |materials_manager.ts (https://github.com/awslabs/aws-      |
   |          |             |         |encryption-sdk-javascript/blob/master/modules/material-    |
   |          |             |         |management/src/materials_manager.ts)                       |
   +----------+-------------+---------+-----------------------------------------------------------+
   |Python    |0.1.0-preview|1.3.0    |materials_managers (https://github.com/aws/aws-encryption- |
   |          |             |         |sdk-python/blob/master/src/aws_encryption_sdk/             |
   |          |             |         |materials_managers/__init__.py)                            |
   +----------+-------------+---------+-----------------------------------------------------------+
   |Java      |0.1.0-preview|1.3.0    |CryptoMaterialsManager.java (https://github.com/aws/aws-   |
   |          |             |         |encryption-sdk-                                            |
   |          |             |         |java/blob/master/src/main/java/com/amazonaws/encryptionsdk/|
   |          |             |         |CryptoMaterialsManager.java)                               |
   +----------+-------------+---------+-----------------------------------------------------------+

                                  Table 1

2.3.  Overview

   The Cryptographic Materials Manager (CMM) assembles the cryptographic
   materials used to encrypt the message (../data-format/message.md) and
   decrypt the encrypted messages.  The CMM interface describes the
   interface that all CMMs MUST implement.

2.4.  Definitions

2.4.1.  Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119
   (https://tools.ietf.org/html/rfc2119).

2.5.  Supported CMMs

   The AWS Encryption SDK provides the following built-in CMM types:

   *  Default CMM (default-cmm.md)

   *  Caching CMM (caching-cmm.md)

   Note: A user MAY create their own custom CMM.

2.6.  Interface

2.6.1.  Inputs

   The inputs to the CMM are groups of related fields, referred to as:

   *  Encryption Materials Request (Section 2.6.1.1)

   *  Decrypt Materials Request (Section 2.6.1.2)

2.6.1.1.  Encryption Materials Request

   This is the input to the get encryption materials (Section 2.6.2.1)
   behavior.

   The encryption materials request MUST include the following:

   *  Encryption Context (structures.md#encryption-context)

      -  The encryption context provided MAY be empty.

   *  Commitment Policy (../client-apis/client.md#commitment-policy)

   The encryption request MAY include the following:

   *  Algorithm Suite (algorithm-suites.md)

   *  Max Plaintext Length

      -  This value represents the maximum length of the plaintext to be
         encrypted using the returned materials.  The length of the
         plaintext to be encrypted MUST not be larger than this value.

2.6.1.2.  Decrypt Materials Request

   This is the input to the decrypt materials (Section 2.6.2.2)
   behavior.

   The decrypt materials request MUST include the following:

   *  Algorithm Suite (algorithm-suites.md)

   *  Commitment Policy (../client-apis/client.md#commitment-policy)

   *  Encrypted Data Keys (structures.md#encrypted-data-keys)

   *  Encryption Context (structures.md#encryption-context)

      -  The encryption context provided MAY be empty.

2.6.2.  Behaviors

   The CMM Interface MUST support the following behaviors:

   *  Get Encryption Materials (Section 2.6.2.1)

   *  Decrypt Materials (Section 2.6.2.2)

2.6.2.1.  Get Encryption Materials

   When the CMM gets an encryption materials request (Section 2.6.1.1),
   it MUST return encryption materials (structures.md#encryption-
   materials) appropriate for the request.

   The encryption materials returned MUST include the following:

   *  Algorithm Suite (algorithm-suites.md)

      -  If the encryption materials request contains an algorithm
         suite, the encryption materials returned SHOULD contain the
         same algorithm suite.

   *  Plaintext Data Key

   *  Encrypted Data Keys (structures.md#encrypted-data-keys)

      -  Every encrypted data key in this list MUST correspond to the
         above plaintext data key.

   *  Encryption Context (structures.md#encryption-context)

      -  The CMM MAY modify the encryption context.

   If the algorithm suite contains a signing algorithm (algorithm-
   suites.md#signature-algorithm):

   *  The CMM MUST include a signing key (structures.md#signing-key).

   *  The CMM SHOULD also add a key-value pair using the reserved key
      "aws-crypto-public-key" to the encryption context.  If it does,
      the mapped value SHOULD be the signature verification key
      corresponding to the signing key.

   If the algorithm suite does not contain a signing algorithm
   (algorithm-suites.md#signature-algorithm):

   *  The CMM SHOULD NOT add a key-value pair using the reserved key
      "aws-crypto-public-key" to the encryption context.

   The CMM MUST ensure that the encryption materials returned are valid.

   *  The encryption materials returned MUST follow the specification
      for encryption-materials (structures.md#encryption-materials).

   *  The value of the plaintext data key MUST be non-NULL.

   *  The plaintext data key length MUST be equal to the key derivation
      input length (algorithm-suites.md#key-derivation-input-length).

   *  The encrypted data keys list MUST contain at least one encrypted
      data key.

   *  If the algorithm suite contains a signing algorithm, the
      encryption materials returned MUST include the generated signing
      key.

2.6.2.2.  Decrypt Materials

   When the CMM gets a decrypt materials request (Section 2.6.1.2), it
   MUST return decryption materials (structures.md#decryption-materials)
   appropriate for the request.

   If the requested algorithm suite does not include a signing algorithm
   but the encryption context includes the reserved "aws-crypto-public-
   key" key, the operation SHOULD fail.  Likewise, if the requested
   algorithm suite includes a signing algorithm but the encryption
   context does not include the reserved "aws-crypto-public-key" key,
   the operation SHOULD fail.

   The decryption materials returned MUST include the following:

   *  Plaintext Data Key

   *  Encryption Context (structures.md#encryption-context)

      -  The CMM MAY modify the encryption context.

      -  The operations made on the encryption context on the Get
         Encryption Materials call SHOULD be inverted on the Decrypt
         Materials call.

   *  Algorithm Suite (algorithm-suites.md)

      -  If the decrypt materials request contains an algorithm suite,
         the decryption materials returned SHOULD contain the same
         algorithm suite.

   If the algorithm suite obtained from the decryption request contains
   a signing algorithm (algorithm-suites.md#signature-algorithm), the
   decryption materials MUST include the signature verification key
   (structures.md#verification-key).

   The CMM MUST ensure that the decryption materials returned are valid.

   *  The decryption materials returned MUST follow the specification
      for decryption-materials (structures.md#decryption-materials).

   *  The value of the plaintext data key MUST be non-NULL.

   *  The plaintext data key returned MUST correspond with at least one
      of the encrypted data keys.

      -  The is typically done by constructing a CMM that uses keyrings/
         master keys.

2.7.  Customization

   The CMM is an ideal point for customization and extension.

   Example scenarios include:

   *  Interacting with other CMMs

   *  Using Keyring(s) (keyring-interface.md)

   *  Modifying the encryption context

   *  Managing the signing/verification keys

   *  Data key Caching

   *  Providing support for policy enforcement

3.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

Acknowledgments

Author's Address

   Amazon AWS
   Amazon AWS

   Email: cryptools+rfc@amazon.com
