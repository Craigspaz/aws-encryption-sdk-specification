



AWS Crypto Tools                                            . Amazon AWS
                                                              Amazon AWS
                                                       21 September 2021


                     master-key-provider-interface
                     master-key-provider-interface

Abstract

   The master-key-provider-interface specification for the AWS
   Encryption SDK.

Table of Contents

   1.  Conventions and Definitions
   2.  Master Key Provider Interface
     2.1.  Version
     2.2.  Implementations
     2.3.  Overview
       2.3.1.  Legacy
       2.3.2.  Consistency
     2.4.  Definitions
       2.4.1.  Conventions used in this document
       2.4.2.  Terms
     2.5.  Interface
       2.5.1.  Get Master Key
       2.5.2.  Get Master Keys For Encryption
       2.5.3.  Decrypt Data Key
   3.  Normative References
   Acknowledgments
   Author's Address

1.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here

2.  Master Key Provider Interface

2.1.  Version

   0.1.0-preview

2.2.  Implementations

   *  Python (https://github.com/aws/aws-encryption-sdk-
      python/blob/master/src/aws_encryption_sdk/key_providers/base.py)

   *  Java (https://github.com/aws/aws-encryption-sdk-
      java/blob/master/src/main/java/com/amazonaws/encryptionsdk/
      MasterKeyProvider.java)

2.3.  Overview

   Master key providers are responsible for managing master keys
   (./master-key-interface.md), determining which master keys should be
   used for encryption, and for decrypting data keys using available
   master keys.

2.3.1.  Legacy

   This is a legacy specification.  Master key providers SHOULD NOT be
   included in any additional implementations.  Any new implementations
   MUST include Keyrings (./keyring-interface.md) instead.

2.3.2.  Consistency

   This specification defines the common behavior between the two
   implementations that determine the REQUIRED functionality.

   Other specifics of behavior and API vary between the two
   implementations.

2.4.  Definitions

2.4.1.  Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119
   (https://tools.ietf.org/html/rfc2119).

2.4.2.  Terms

   *  Provider ID: A value that identifies a master key provider.  This
      concept is equivalent to "key namespace" for Keyrings.

   *  Key ID: A value that identifies a master key within the context of
      a master key provider.  This concept is equivalent to "key name"
      for Keyrings.

   *  Provider Info: The value that is written to a serialized encrypted
      data key that identifies a master key within the context of a
      master key provider.  This MUST always be equal to the master
      key's key ID with the exception of the raw AES master key.  For a
      detailed description of this exception, see the Raw AES Keyring
      specification (./raw-aes-keyring.md).

2.5.  Interface

2.5.1.  Get Master Key

   This interface provides a way for a master key provider to return
   master keys.

   An implementation MUST support master key selection by key ID.

   An implementation MAY support master key selection by provider info
   or provider ID.

   The output of this interface MUST be a master key.

   If the master key provider cannot locate an appropriate master key,
   the call MUST result in an error.

2.5.2.  Get Master Keys For Encryption

   This interface provides a way for a master key provider to indicate
   which master keys SHOULD be used for encryption.

   Inputs to this interface MUST include the encryption context.

   Inputs MAY include the plaintext body and plaintext size.

   The output of this interface MUST include a list of all master keys
   that SHOULD be used for encryption.

   The output of this interface MUST indicate which one of those master
   keys MUST be used to generate the data key.

2.5.3.  Decrypt Data Key

   This interface is used to decrypt a data key.

   The master key provider SHOULD attempt to decrypt the data key by
   passing the request to any master keys that it has access to until it
   has either exhausted available master keys or obtained a plaintext
   data key.

   Inputs to this interface MUST include the algorithm suite, the
   encryption context, and a list of encrypted data keys.

   The output of this interface MUST include the decrypted data key and
   information that can identify which master key decrypted the data
   key.

   If the master key provider cannot decrypt the data key, the call MUST
   result in an error.

3.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

Acknowledgments

Author's Address

   Amazon AWS
   Amazon AWS

   Email: cryptools+rfc@amazon.com
