



AWS Crypto Tools                                            . Amazon AWS
                                                              Amazon AWS
                                                       21 September 2021


                            algorithm-suites
                            algorithm-suites

Abstract

   The algorithm-suites specification for the AWS Encryption SDK.

Table of Contents

   1.  Conventions and Definitions
   2.  Algorithm Suites
     2.1.  Version
     2.2.  Implementations
     2.3.  Overview
     2.4.  Definitions
       2.4.1.  Conventions used in this document
       2.4.2.  AES
       2.4.3.  GCM
       2.4.4.  Identity KDF
       2.4.5.  HKDF
       2.4.6.  ECDSA
     2.5.  Supported Algorithm Suites
     2.6.  Algorithm Suites Encryption Key Derivation Settings
     2.7.  Algorithm Suites Encryption Settings
     2.8.  Algorithm Suites Commit Key Derivation Settings
     2.9.  Algorithm Suites Signature Settings
     2.10. Structure
       2.10.1.  Algorithm Suite ID
       2.10.2.  Encryption Algorithm
       2.10.3.  Encryption Algorithm Mode
       2.10.4.  Encryption Key Length
       2.10.5.  IV Length
       2.10.6.  Authentication Tag Length
       2.10.7.  Encryption Key Derivation Algorithm
       2.10.8.  Key Derivation Input Length
       2.10.9.  Key Commitment
       2.10.10. Commit Key
       2.10.11. Commit Key Derivation Algorithm
       2.10.12. Commit Key Length
       2.10.13. Signature Algorithm
       2.10.14. Message Format Version
       2.10.15. Algorithm Suite Data
       2.10.16. Algorithm Suite Data Length
     2.11. Security Considerations
       2.11.1.  Which algorithm suite should I use?
   3.  Normative References
   Acknowledgments
   Author's Address

1.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here

2.  Algorithm Suites

2.1.  Version

   0.2.0

2.2.  Implementations

   *  C (https://github.com/awslabs/aws-encryption-sdk-
      c/blob/master/source/cipher.c)

   *  NodeJS (https://github.com/awslabs/aws-encryption-sdk-
      javascript/blob/master/modules/material-management/src/
      node_algorithms.ts)

   *  Browser JS (https://github.com/awslabs/aws-encryption-sdk-
      javascript/blob/master/modules/material-management/src/
      web_crypto_algorithms.ts)

   *  Python (https://github.com/aws/aws-encryption-sdk-
      python/blob/master/src/aws_encryption_sdk/identifiers.py)

   *  Java (https://github.com/aws/aws-encryption-sdk-
      java/blob/master/src/main/java/com/amazonaws/encryptionsdk/
      CryptoAlgorithm.java)

2.3.  Overview

   An algorithm suite is a collection of cryptographic algorithms and
   related values.  The algorithm suite defines the behaviors the AWS
   Encryption SDK MUST follow for cryptographic operations.

2.4.  Definitions

2.4.1.  Conventions used in this document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in RFC 2119
   (https://tools.ietf.org/html/rfc2119).

2.4.2.  AES

   Specification: NIST FIPS 297 (https://nvlpubs.nist.gov/nistpubs/FIPS/
   NIST.FIPS.197.pdf)

   The Advanced Encryption Standard (AES) is a symmetric block cipher
   encryption algorithm.

2.4.3.  GCM

   Specification: NIST Special Publication 800-38D
   (https://nvlpubs.nist.gov/nistpubs/Legacy/SP/
   nistspecialpublication800-38d.pdf)

   Galois/Counter Mode is a mode of operation for block ciphers that
   provides authenticated encryption with additional data (AEAD).

   If specified to use GCM, the AWS Encryption SDK MUST use GCM with the
   following specifics:

   *  The internal block cipher is the encryption algorithm specified by
      the algorithm suite.

2.4.4.  Identity KDF

   The identity key derivation function (Identity KDF) is a key
   derivation algorithm.

   The Identity KDF MUST take a byte sequence as input, and MUST return
   the input, unchanged, as output.

   If included in the algorithm suite, the algorithm suite's encryption
   key length MUST equal the algorithm suite's key derivation input
   length (Section 2.10.8).

2.4.5.  HKDF

   Specification: RFC 5869 (https://tools.ietf.org/html/rfc5869)

   The HMAC-based extract-and-expand key derivation function (HKDF) is a
   key derivation algorithm.

2.4.5.1.  HKDF Encryption Key

   If an algorithm suite uses HKDF to derive the encryption key the AWS
   Encryption SDK MUST use HKDF with the following specifics:

   *  The hash function MUST be specified by the algorithm suite key
      derivation settings (Section 2.6).

   *  For the extract step:

      -  The input keying material MUST be the data key generated by the
         key provider.

      -  The length of the input keying material MUST equal the key
         derivation input length (Section 2.10.8) specified by the
         algorithm suite encryption key derivation settings
         (Section 2.6).

      -  If there is no salt length defined for the algorithm suite
         encryption key derivation commitment setting (Section 2.6), the
         the salt MUST be a byte sequence of 0 as long as the hash
         length in bytes.

      -  If salt length is defined for the algorithm suite encryption
         key derivation commitment setting (Section 2.6), the salt MUST
         be the message ID (../data-format/message-header.md#message-id)
         with a length equal to the salt length.

   *  For the expand step:

      -  The input pseudorandom key MUST be the output from the extract
         step.

      -  The length of the output keying material MUST equal the
         encryption key length (Section 2.10.4) specified by the
         algorithm suite encryption settings (Section 2.7).

      -  If key commitment (Section 2.10.9) for the algorithm suite
         encryption key derivation setting (Section 2.6) is True, then
         the input info MUST be the string "DERIVEKEY" as UTF8 encoded
         bytes.

      -  If key commitment (Section 2.10.9) for the algorithm suite
         encryption key derivation setting (Section 2.6) is False, the
         the input info MUST be a concatenation of the algorithm suite
         ID (Section 2.10.1) followed by the message ID (../data-format/
         message-header.md#message-id).

2.4.5.2.  HKDF Commit Key

   If an algorithm suite uses HKDF to derive the commitment key the AWS
   Encryption SDK MUST use HKDF with the following specifics:

   *  The hash function MUST be specified by the algorithm suite
      commitment settings (Section 2.8).

   *  For the extract step:

      -  The input keying material MUST be the data key generated by the
         key provider.

      -  The length of the input keying material MUST equal the key
         derivation input length (Section 2.10.8) specified by the
         algorithm suite commit key derivation setting.

      -  The salt MUST be the message ID (../data-format/message-
         header.md#message-id) with a length of 256 bits.

   *  For the expand step:

      -  The input pseudorandom key MUST be the output from the extract
         step.

      -  The length of the output keying material MUST equal the
         algorithm suite data length (Section 2.10.16) specified by the
         supported algorithm suites (Section 2.5).

      -  The input info MUST the string "COMMITKEY" as UTF8 encoded
         bytes by the algorithm suite commitment settings.

   For algorithm suites that support commitment, the AWS Encryption SDK
   SHOULD only perform the extract step once and use the same output
   from the extract step for both the encryption key and the commitment
   key.

   Verification of the commitment key MUST be a constant time
   comparison.

2.4.6.  ECDSA

   Specification: ANS X9.62-2005 (Not available publicly, but the
   specification for ECDSA is replicated in SEC 1 version 2.0
   (https://www.secg.org/sec1-v2.pdf).  Information about obtaining
   copies of ANS X9.62 is available at http://www.x9.org.)

   The Elliptic Curve Digital Signature Algorithm (ECDSA) is a signature
   algorithm.

   If specified to use ECDSA, the AWS Encryption SDK MUST use ECDSA with
   the following specifics:

   *  The elliptic curve is specified by the algorithm suite.  The
      specific curves are defined in Digital Signature Standard (DSS)
      (FIPS PUB 186-4) (https://nvlpubs.nist.gov/nistpubs/FIPS/
      NIST.FIPS.186-4.pdf).

   *  The hash function is specified by the algorithm suite.

   *  When included in the message (../data-format/message.md), the
      output signature value is encoded using the ANS.1 structure
      "ECDSA-Sig-Value" defined in section C.5 of Sec 1 version 2.0
      (http://www.secg.org/sec1-v2.pdf):

   "ECDSA-Sig-Value ::= SEQUENCE { r INTEGER, s INTEGER }"

   *  If serialized, the binary form of the verification key is equal to
      the elliptic curve point Q compressed according to section 2.3.3
      of SEC 1 version 2.0 (http://www.secg.org/sec1-v2.pdf).

2.5.  Supported Algorithm Suites

   The following table includes the algorithm suites supported by the
   AWS Encryption SDK.  The value "00 00" is reserved and MUST NOT be
   used as an Algorithm Suite ID in the future.

    +==========================+================+=====================+
    | Algorithm Suite ID (hex) | Message Format | Algorithm Suite     |
    |                          | Version        | Data Length (bytes) |
    +==========================+================+=====================+
    | 05 78                    | 2.0            | 32                  |
    +--------------------------+----------------+---------------------+
    | 04 78                    | 2.0            | 32                  |
    +--------------------------+----------------+---------------------+
    | 03 78                    | 1.0            | N/A                 |
    +--------------------------+----------------+---------------------+
    | 03 46                    | 1.0            | N/A                 |
    +--------------------------+----------------+---------------------+
    | 02 14                    | 1.0            | N/A                 |
    +--------------------------+----------------+---------------------+
    | 01 78                    | 1.0            | N/A                 |
    +--------------------------+----------------+---------------------+
    | 01 46                    | 1.0            | N/A                 |
    +--------------------------+----------------+---------------------+
    | 01 14                    | 1.0            | N/A                 |
    +--------------------------+----------------+---------------------+
    | 00 78                    | 1.0            | N/A                 |
    +--------------------------+----------------+---------------------+
    | 00 46                    | 1.0            | N/A                 |
    +--------------------------+----------------+---------------------+
    | 00 14                    | 1.0            | N/A                 |
    +--------------------------+----------------+---------------------+

                                  Table 1

2.6.  Algorithm Suites Encryption Key Derivation Settings

   The following table includes key derivation information for supported
   algorithm suites.

   +===========+============+===========+==========+======+============+
   | Algorithm |Key         | Algorithm | Hash     |Salt  | Key        |
   | Suite ID  |Derivation  |           | Function |Length| Commitment |
   | (hex)     |Input Length|           |          |(bits)|            |
   |           |(bits)      |           |          |      |            |
   +===========+============+===========+==========+======+============+
   | 05 78     |256         | HKDF      | SHA-512  |256   | True       |
   +-----------+------------+-----------+----------+------+------------+
   | 04 78     |256         | HKDF      | SHA-512  |256   | True       |
   +-----------+------------+-----------+----------+------+------------+
   | 03 78     |256         | HKDF      | SHA-384  |0     | False      |
   +-----------+------------+-----------+----------+------+------------+
   | 03 46     |192         | HKDF      | SHA-384  |0     | False      |
   +-----------+------------+-----------+----------+------+------------+
   | 02 14     |128         | HKDF      | SHA-256  |0     | False      |
   +-----------+------------+-----------+----------+------+------------+
   | 01 78     |256         | HKDF      | SHA-256  |0     | False      |
   +-----------+------------+-----------+----------+------+------------+
   | 01 46     |192         | HKDF      | SHA-256  |0     | False      |
   +-----------+------------+-----------+----------+------+------------+
   | 01 14     |128         | HKDF      | SHA-256  |0     | False      |
   +-----------+------------+-----------+----------+------+------------+
   | 00 78     |256         | Identity  | N/A      |0     | False      |
   |           |            | KDF       |          |      |            |
   +-----------+------------+-----------+----------+------+------------+
   | 00 46     |192         | Identity  | N/A      |0     | False      |
   |           |            | KDF       |          |      |            |
   +-----------+------------+-----------+----------+------+------------+
   | 00 14     |128         | Identity  | N/A      |0     | False      |
   |           |            | KDF       |          |      |            |
   +-----------+------------+-----------+----------+------+------------+

                                  Table 2

2.7.  Algorithm Suites Encryption Settings

   The following table includes the encryption settings for supported
   algorithm suites.

   +=========+==========+==========+==========+=======+================+
   |Algorithm|Encryption|Encryption|Encryption|IV     | Authentication |
   |Suite ID |Algorithm |Algorithm |Key Length|Length | Tag Length     |
   |(hex)    |          |Mode      |(bits)    |(bytes)| (bytes)        |
   +=========+==========+==========+==========+=======+================+
   |05 78    |AES       |GCM       |256       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+
   |04 78    |AES       |GCM       |256       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+
   |03 78    |AES       |GCM       |256       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+
   |03 46    |AES       |GCM       |192       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+
   |02 14    |AES       |GCM       |128       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+
   |01 78    |AES       |GCM       |256       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+
   |01 46    |AES       |GCM       |192       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+
   |01 14    |AES       |GCM       |128       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+
   |00 78    |AES       |GCM       |256       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+
   |00 46    |AES       |GCM       |192       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+
   |00 14    |AES       |GCM       |128       |12     | 16             |
   +---------+----------+----------+----------+-------+----------------+

                                  Table 3

2.8.  Algorithm Suites Commit Key Derivation Settings

   The following table includes commitment information for supported
   algorithm suites.  These values are only relevant to algorithm suites
   that support key commitment (Section 2.10.9).

    +================+================+===========+==========+========+
    | Algorithm      | Key Derivation | Algorithm | Hash     | Salt   |
    | Suite ID (hex) | Input Length   |           | Function | Length |
    |                | (bits)         |           |          | (bits) |
    +================+================+===========+==========+========+
    | 05 78          | 256            | HKDF      | SHA-512  | 256    |
    +----------------+----------------+-----------+----------+--------+
    | 04 78          | 256            | HKDF      | SHA-512  | 256    |
    +----------------+----------------+-----------+----------+--------+
    | 03 78          | N/A            | N/A       | N/A      | N/A    |
    +----------------+----------------+-----------+----------+--------+
    | 03 46          | N/A            | N/A       | N/A      | N/A    |
    +----------------+----------------+-----------+----------+--------+
    | 02 14          | N/A            | N/A       | N/A      | N/A    |
    +----------------+----------------+-----------+----------+--------+
    | 01 78          | N/A            | N/A       | N/A      | N/A    |
    +----------------+----------------+-----------+----------+--------+
    | 01 46          | N/A            | N/A       | N/A      | N/A    |
    +----------------+----------------+-----------+----------+--------+
    | 01 14          | N/A            | N/A       | N/A      | N/A    |
    +----------------+----------------+-----------+----------+--------+
    | 00 78          | N/A            | N/A       | N/A      | N/A    |
    +----------------+----------------+-----------+----------+--------+
    | 00 46          | N/A            | N/A       | N/A      | N/A    |
    +----------------+----------------+-----------+----------+--------+
    | 00 14          | N/A            | N/A       | N/A      | N/A    |
    +----------------+----------------+-----------+----------+--------+

                                  Table 4

2.9.  Algorithm Suites Signature Settings

   The following table includes signature information for supported
   algorithm suites.

        +==========================+==============================+
        | Algorithm Suite ID (hex) | Signature Algorithm          |
        +==========================+==============================+
        | 05 78                    | ECDSA with P-384 and SHA-384 |
        +--------------------------+------------------------------+
        | 04 78                    | Not applicable               |
        +--------------------------+------------------------------+
        | 03 78                    | ECDSA with P-384 and SHA-384 |
        +--------------------------+------------------------------+
        | 03 46                    | ECDSA with P-384 and SHA-384 |
        +--------------------------+------------------------------+
        | 02 14                    | ECDSA with P-256 and SHA-256 |
        +--------------------------+------------------------------+
        | 01 78                    | Not applicable               |
        +--------------------------+------------------------------+
        | 01 46                    | Not applicable               |
        +--------------------------+------------------------------+
        | 01 14                    | Not applicable               |
        +--------------------------+------------------------------+
        | 00 78                    | Not applicable               |
        +--------------------------+------------------------------+
        | 00 46                    | Not applicable               |
        +--------------------------+------------------------------+
        | 00 14                    | Not applicable               |
        +--------------------------+------------------------------+

                                  Table 5

2.10.  Structure

   The fields described below are REQUIRED to be specified by algorithm
   suites, unless otherwise specified.

2.10.1.  Algorithm Suite ID

   A 2-byte hex value that uniquely identifies an algorithm suite.

2.10.2.  Encryption Algorithm

   The block cipher encryption algorithm.

   The length of the input encryption key MUST equal the encryption key
   length (Section 2.10.4) specified by the algorithm suite.

2.10.2.1.  Supported Encryption Algorithms

   *  Section 2.4.2

2.10.3.  Encryption Algorithm Mode

   The AEAD operation mode used with the encryption algorithm.

   The length of the input IV MUST equal the IV length specified by the
   algorithm suite.  The length of the authentication tag MUST equal the
   authentication tag length specified by the algorithm suite.

2.10.3.1.  Supported Encryption Algorithm Modes

   *  Section 2.4.3

2.10.4.  Encryption Key Length

   The length of the encryption key used as input to the encryption
   algorithm.

2.10.5.  IV Length

   The length of the initialization vector (IV) used with the encryption
   algorithm.

2.10.6.  Authentication Tag Length

   The length of the authentication tag used with AEAD.

2.10.7.  Encryption Key Derivation Algorithm

   This key derivation algorithm defines what key derivation function
   (KDF) to use for encryption key generation.  The specified KDF
   algorithm MUST be used to generate the encryption algorithm
   encryption key input.

2.10.7.1.  Supported Encryption Key Derivation Algorithms

   *  Identity KDF (Section 2.4.4)

   *  HKDF (Section 2.4.5.1)

2.10.8.  Key Derivation Input Length

   The length of the input to the Key Derivation Algorithm.

2.10.9.  Key Commitment

   AES-GCM is not key committing by default.  Key commitment is a
   property, which ensures that exactly one data key can be used to
   decrypt a ciphertext.  However, not all algorithm suites provide this
   property.

2.10.9.1.  Supported Key Commitment Values

   *  True

   *  False

2.10.10.  Commit Key

   A key that is used to provide key commitment (Section 2.10.9) to AES-
   GCM.

2.10.11.  Commit Key Derivation Algorithm

   This key derivation algorithm defines what key derivation function
   (KDF) to use for commitment key generation.  The specified KDF
   algorithm MUST be used to generate the commit key (Section 2.10.10).

2.10.11.1.  Supported Commit Key Derivation Algorithm

   *  HKDF (Section 2.4.5.2)

2.10.12.  Commit Key Length

   The length of the commit key used to verify key commitment
   (Section 2.10.9).

2.10.13.  Signature Algorithm

   This field is OPTIONAL.

   The signature algorithm defines what algorithm to use for signature
   generation and verification.

   If the algorithm suite includes a signature algorithm:

   *  Signatures MUST be generated using the specified signature
      algorithm.

   *  Signatures MUST be verified using the specified signature
      algorithm.

   If the algorithm suite does not include a signature algorithm:

   *  Signatures MUST NOT be generated.

   *  Signatures MUST NOT be verified.

2.10.13.1.  Supported Signature Algorithms

   *  ECDSA with P256 and SHA256 (Section 2.4.6)

   *  ECDSA with P384 and SHA384 (Section 2.4.6)

2.10.14.  Message Format Version

   Indicates the message format version for the supported algorithm
   suite.

2.10.14.1.  Supported Message Format Version

   *  1.0

   *  2.0

2.10.15.  Algorithm Suite Data

   Algorithm suites may capture a variable-per-algorithm-suite length of
   data relevant to that algorithm suite's mode of operation.

2.10.15.1.  Supported Algorithm Suite Data

   *  Algorithm Suite 05 78 MUST store the commit key in the suite data

   *  Algorithm Suite 04 78 MUST store the commit key in the suite data

2.10.16.  Algorithm Suite Data Length

   Then length of the algorithm suite data (Section 2.10.15).  The field
   is always present in message format 2.0, but its length and contents
   are determined by the algorithm suite.  The field MAY be length 0.

2.10.16.1.  Supported Algorithm Suite Data Lengths

   *  32

2.11.  Security Considerations

2.11.1.  Which algorithm suite should I use?

   You should use the default algorithm suite.

   You should use an algorithm suite that supports key commitment.

   You may use the non-default AES-GCM with key derivation and signing
   key algorithm suites if key derivation input lengths of other sizes
   are required.

   If the users who encrypt and the users who decrypt are equally
   trusted, you may use AES-GCM with only key derivation algorithm
   suites.

   You should not use AES-GCM with only key derivation algorithm suites
   if the users who encrypt and the users who decrypt are not equally
   trusted.

   You should not use AES-GCM without key Derivation or signing, except
   for backwards compatibility.

3.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

Acknowledgments

Author's Address

   Amazon AWS
   Amazon AWS

   Email: cryptools+rfc@amazon.com
